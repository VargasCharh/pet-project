

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.bulkInsert('PracticeQuestions', [
      {
        questionPractice: `Изограмма — это слово, в котором нет повторяющихся букв, последовательных или непоследовательных. Реализуйте функцию, определяющую, является ли строка, содержащая только буквы, изограммой. 
`,
companyId: 1,
      },
      {
        questionPractice: `Вам дадут слово. Ваша задача — вернуть средний символ слова. Если длина слова нечетная, вернуть средний символ. Если длина слова четная, верните средние 2 символа.\nKata.getMiddle("test") should return "es"`,
        companyId: 1,
      },
      {
        questionPractice: `Банкоматы позволяют использовать 4- или 6-значные PIN-коды, а PIN-коды не могут содержать ничего, кроме ровно 4 или ровно 6 цифр.\nЕсли функции передана допустимая строка PIN-кода, верните true, иначе верните false`,
        companyId: 1,
      },
      {
        questionPractice: `Проверьте, содержит ли строка одинаковое количество «x» и «o». Метод должен возвращать логическое значение и не учитывать регистр. Строка может содержать любой символ.`,
        companyId: 2,
      },
      {
        questionPractice: `В приведенных ниже примерах показано, как написать функцию accum\n
        accum("abcd") -> "A-Bb-Ccc-Dddd"
        `,
        companyId: 2,
      },
      {
        questionPractice: `Ваша задача — написать функцию, которая принимает строку и возвращает новую строку, в которой удалены все гласные.`,
        companyId: 2,
      },
      {
        questionPractice: `Напишите функцию partlist, которая дает все способы разделить список (массив) не менее чем из двух элементов на две непустые части.\n
        a = ["az", "toto", "picaro", "zone", "kiwi"] -->\n
[["az", "toto picaro zone kiwi"], ["az toto", "picaro zone kiwi"], ["az toto picaro", "zone kiwi"], ["az toto picaro zone", "kiwi"]] 
        `,
        companyId: 3,
      },
      {
        questionPractice: `Возьмите 2 строки s1и s2включите только буквы от aдо z. Возвращает новую отсортированную строку, максимально длинную, содержащую различные буквы (каждая из которых взята только один раз) из s1 или s2.`,
        companyId: 3,
      },
      {
        questionPractice: `Вычислите сумму чисел в n -й строке этого треугольника (начиная с индекса 1), например: ( Ввод --> Вывод )\n
        1 -->  1\n
        2 --> 3 + 5 = 8\n`,
        companyId: 3,
      },
      {
        questionPractice: `Возвращает количество (количество) гласных в заданной строке.\nМы будем рассматривать a, e, i, o, uкак гласные для этой Ката (но не y).`,
        companyId: 4,
      },
      {
        questionPractice: `Ваша функция должна возвращать сумму четных значений этой последовательности.\nТолько числа без десятичных знаков 4могут 4.0быть четными.`,

        companyId: 4,
      },
      {
        questionPractice: `Ваша задача состоит в том, чтобы создать функцию, которая может принимать любое неотрицательное целое число в качестве аргумента и возвращать его с цифрами в порядке убывания. По сути, переставьте цифры, чтобы получить максимально возможное число.\n
        Вход: 42145 Выход:54421
        `,

        companyId: 4,
      },
      {
        questionPractice: `Даны два целых числа aи b, которые могут быть положительными или отрицательными, найдите сумму всех целых чисел между ними и включая их и верните ее. Если два числа равны, верните aили b.`,

        companyId: 5,
      },
      {
        questionPractice: `Напишите метод, который, учитывая два аргумента widthи height, возвращает строку, представляющую прямоугольник с этими размерами.\n
        Прямоугольник должен быть заполнен пробелами, а его границы должны состоять из звездочек ( *).`,

        companyId: 5,
      },
      {
        questionPractice: `В этом задании вы создадите функцию, которая берет список неотрицательных целых чисел, строк, обьектов и возвращает новый список с отфильтрованными по возрастанию числами`,

        companyId: 5,
      },
    ], {});
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.bulkDelete('PracticeQuestions', null, {});
  }
};
